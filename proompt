#!/usr/bin/env bash

# proompt
#
# this script is used to craft a prompt for AI to use with the combined files of
# a project.

DEFAULT_EXTENSIONS="php,js,ts,tsx,jsx,bash,sh,md,go,rs,ml,hs,rb,py,c,cpp,h,hpp,css,scss,html,xml,json,yaml,yml"

get_combined_file() {
    local extensions="$1"
    local ignore_case="$2"

    IFS=',' read -ra ext_array <<<"$extensions"
    IFS=',' read -ra ext_array <<<"$extensions"

    # construct a single regex for all extensions
    local regex
    regex=$(
        IFS='|'
        echo "${ext_array[*]}"
    )

    # use a single find command with -regex
    git ls-files | grep $ignore_case -E "\\.(${regex})$" |
        while IFS= read -r file; do
            extension="${file##*.}"
            echo "$file:"
            echo "\`\`\`$extension"
            cat "$file"
            echo -e "\n\`\`\`\n"
        done
}

# check for required commands
check_command() {
    if ! command -v "$1" &>/dev/null; then
        echo "Error: $1 is required but not installed. Please install it and try again." >&2
        exit 1
    fi
}

main() {
    check_command git
    check_command tree

    local extensions=""
    local ignore_case=""

    while [[ $# -gt 0 ]]; do
        case "$1" in
        -i | --ignore-case)
            ignore_case="-iregex"
            shift
            ;;
        -x | --extensions=*)
            extensions="${1#*=}"
            shift
            ;;
        -h | --help)
            echo "Usage: $0 [options]"
            echo "Options:"
            echo "  -i, --ignore-case    Ignore case when matching file extensions"
            echo "  -x, --extensions     Specify file extensions to include (comma-separated)"
            echo "  -h, --help           Show this help message and exit"
            echo ""
            echo "Example: $0 -i -x=php,js,ts"
            exit 0
            ;;
        *)
            echo "Unknown option: $1" >&2
            exit 1
            ;;
        esac
    done

    if [ -z "$extensions" ]; then
        # confirm with the user that they want to use the default extensions
        read -r -p "Do you want to use the default extensions? (Y/n): " use_default
        use_default=${use_default:-Y} # set default to Y if user just presses Enter
        if [[ $use_default =~ ^[Nn]$ ]]; then
            read -r -p "Enter the extensions to include (comma-separated): " extensions
            echo "Using extensions: $extensions"
        else
            echo "Using default extensions"
            extensions="$DEFAULT_EXTENSIONS"
        fi
    fi

    echo "Project: "
    tree --gitignore --dirsfirst
    echo
    get_combined_file "$extensions" "$ignore_case"
}

main "$@"
